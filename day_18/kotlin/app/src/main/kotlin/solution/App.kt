/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package solution

import kotlin.math.ceil
import kotlin.math.floor
import kotlin.math.max


class FishNumber(var number: String) {
  companion object {
    private val brackets = mapOf('[' to 1, ']' to -1)
    val default = FishNumber("")
  }

  fun reduce(): String {

    var reducing = true
    while (reducing) {

      var bracketReduced = number
      var bracketReducing = true
      while (bracketReducing) {
        val nextReduced = reduceBrackets(bracketReduced)
        bracketReducing = bracketReduced != nextReduced
        bracketReduced = nextReduced
      }

      var valueReduced = bracketReduced
      "\\d{2}".toRegex().findAll(valueReduced).firstOrNull()?.range?.let {
        val value = Integer.parseInt(valueReduced.substring(it))
        if (value >= 10) {
          val split = "[%d,%d]".format(floor(value / 2.0).toInt(), ceil(value / 2.0).toInt())
          valueReduced = valueReduced.replaceRange(it, split)
        }
      }

      reducing = valueReduced != bracketReduced
      number = valueReduced
    }

    return number
  }

  fun reduceBrackets(number: String): String {
    var bracketCounter = 0
    for (index in number.indices) {
      if (bracketCounter == 5) {
        return explode(number, index)
      }

      if (number[index] in brackets) {
        bracketCounter += brackets[number[index]]!!
      }
    }
    return number
  }

  fun magnitude() : Int {
    if (!number.contains(",")) {
      return Integer.parseInt(number)
    }
    if (number.indexOf('[') == number.lastIndexOf('[')) {
      val (left, right) = number.substring(1, number.length - 1).split(",").map { Integer.parseInt(it) }
      return 3 * left + 2 * right
    }

    var bracketCounter = 0
    var index = 0
    for (i in 1 until number.length - 1) {
      bracketCounter += brackets[number[i]] ?: 0
      if (bracketCounter == 0) {
        index = i
        break
      }
    }

    val left = number.substring(1, index + 1)
    val right = number.substring(index + 2, number.length - 1)
    return 3 * FishNumber(left).magnitude() + 2 * FishNumber(right).magnitude()
  }

  fun explode(number: String, index: Int): String {
    val endBracketIndex = number.indexOf(']', index)
    val subNumber = number.substring(index, endBracketIndex)
    val (leftNumber, rightNumber) = subNumber.split(',').map { Integer.parseInt(it) }

    val leftPart = number.substring(0, index - 1)
    val rightPart = number.substring(endBracketIndex + 1)

    return addToNumber(leftPart, leftNumber, true) + "0" + addToNumber(rightPart, rightNumber, false)
  }

  fun addToNumber(number: String, value: Int, left: Boolean): String {
    val numbers = "\\d+".toRegex().findAll(number)
    (if (left) numbers.lastOrNull() else numbers.firstOrNull())?.range?.let {
      val addedValue = value + Integer.parseInt(number.substring(it))
      return number.replaceRange(it, addedValue.toString())
    }
    return number
  }

  operator fun plus(increment: FishNumber): FishNumber {
    if (this == default) {
      return increment
    }
    if (increment == default) {
      return this
    }

    val ret = FishNumber("[%s,%s]".format(number, increment.number))
    ret.reduce()
    return ret
  }

  override fun toString(): String {
    return number
  }
}

fun main() {
  val contents = Thread.currentThread().contextClassLoader.getResourceAsStream("input.data").bufferedReader().readLines()

  val numbers = contents.map { FishNumber(it) }
  val result = numbers.fold(FishNumber.default, FishNumber::plus)
  println("Part one: ${result.magnitude()}")

  var maxValue = Int.MIN_VALUE
  for (i in numbers.indices) {
    for (j in numbers.indices) {
      if (i == j) {
        continue
      }
      maxValue = max(maxValue, (numbers[i] + numbers[j]).magnitude())
      maxValue = max(maxValue, (numbers[j] + numbers[i]).magnitude())
    }
  }
  println("Part two: $maxValue")
}
